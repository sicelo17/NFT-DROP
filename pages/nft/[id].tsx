/* eslint-disable @next/next/no-img-element */
import React, {useState, useEffect} from "react";
import { useAddress, useDisconnect, useMetamask, useNFTDrop } from "@thirdweb-dev/react";
import {GetServerSideProps} from 'next'
import {sanityClient, urlFor} from "../../sanity"
import {Collection} from '../../typings'
import Link from "next/link";
import {BigNumber} from "ethers"
import toast, { Toaster } from 'react-hot-toast';
import Head from "next/head";

interface Props {
  collections: Collection
}

function NFTDropPage({collections}: Props) {
  const [calmedSupply, setCalmedSupply] = useState<number>(0);
  const [totalSupply, setTotalSupply] = useState<BigNumber>()
  const [loading, setLoading] = useState<boolean>(true)
  const [priceInEth, setPriceInEth] = useState<string>()
  const nftDrop = useNFTDrop(collections.address)
  //console.log(collections.address)
  // Auth
  const connectWithMetamask = useMetamask();
  const address = useAddress();
  const disconnect = useDisconnect();

  useEffect(() => {
        if (!nftDrop) return;

    const fetchPrice = async() => {
      const claimConditions = await nftDrop.claimConditions.getAll()

      setPriceInEth(claimConditions?.[0].currencyMetadata.displayValue)
    }
  })

  useEffect(() => {
    if (!nftDrop) return;

    const fetchNFTDropData = async () => {
      setLoading(true)

      const claimed = await nftDrop.getAllClaimed()
      const total = await nftDrop.totalSupply()

      setCalmedSupply(claimed.length)
      setTotalSupply(total)

      setLoading(false)
    }

    fetchNFTDropData()
  }, [nftDrop])

  const mintNFT = () => {
    if (!nftDrop || !address) return

    const quantity = 1; // how many unique NFT you want to claim

    setLoading(true)
    const notification = toast.loading('Minting...', {
      style: {
        background: "#fff",
        color: 'green',
        fontWeight: 'bolder',
        fontSize: "17px",
        padding: "20px"
      }
    })

    nftDrop.claimTo(address, quantity).then(async (tx) => {
      const receipt = tx[0].receipt // the transaction receipt
      const claimedTokenId = tx[0].data // the id of the NFT claimed
      const claimedNFT = await tx[0].data // (optional) get the claimed NFT metadata

      toast('You Successfully Minted!', {
        duration: 8000,
        style: {
          background: "green",
          color: "#fff",
          fontWeight: "bolder",
          fontSize: "17px",
          padding: "20px"
        }
      })

      console.log(receipt, "ðŸš€")
      console.log(claimedTokenId)
      console.log(claimedNFT)
    }).catch(err => {
      console.log(err)
      toast('Woops!... Something went wrong', {
        style: {
          background: "red",
          color: "#fff",
          fontWeight: "bolder",
          fontSize: "17px",
          padding: "20px"
        }
      })
    }).finally(() => {
      setLoading(false)
      toast.dismiss(notification)
    })
  }

  //console.log(address);

  return (
    <div className="flex h-screen flex-col lg:grid lg:grid-cols-10">
            <Head>
        <title>NFT COLLECTION</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="https://upload.wikimedia.org/wikipedia/commons/thumb/2/24/NFT_Icon.png/600px-NFT_Icon.png" />
      </Head>
      <Toaster position="bottom-center"/>
      <div
        className="lg:col-span-4 bg-gradient-to-br from-cyan-800 pt-20
      to-rose-500"
      >
        <div className="flex flex-col items-center justify-center py-2 lg:min-h-screen">
          <div
            className="rounded-xl bg-gradient-to-br from-yellow-400 to-purple-600
          p-2"
          >
            <img
              className="w-44 rounded-xl object-cover lg:h-96 lg:w-72"
              src={urlFor(collections.previewImage).url()}
              alt="nft/img"
            />
          </div>
          <div className="text-center p-5 space-y-2">
            <h1 className="text-4xl font-bold text-white">{collections.nftCollectionName}</h1>
            <h2 className="text-xl text-gray-300">
              {collections.description}
            </h2>
            <br />
            <hr />
              <h2 className="text-xl text-gray-300">
              A non-fungible token is a financial security consisting of digital data stored in a blockchain, a form of distributed ledger. The ownership of an NFT is recorded in the blockchain, and can be transferred by the owner, allowing NFTs to be sold and traded.
            </h2>
          </div>
        </div>
      </div>
      <div className="flex flex-1 flex-col p-12 lg:col-span-6">
        {/* header */}
        <header
          className="flex items-center justify-between 
        "
        >
          <Link href={'/'}>
                      <h1
            className="w-52 cursor-pointer text-xl font-extralight
          sm:w-80"
          >
            The
            <span className="font-extrabold underline decoration-pink-600/50">
              {" "}
              Best{" "}
            </span>
            nft market place
          </h1>
          </Link>
          <button
            className="rounded-full bg-rose-400 px-4 
          py-2 text-xs font-bold text-white lg:py-3 lg:text-base"
            onClick={() => (address ? disconnect() : connectWithMetamask())}
          >
            {address ? "Sign Out" : "Sign In"}
          </button>
        </header>
        <hr className="my-2 border" />

        {address && (
          <p className="text-center text-sm text-rose-400">
            You`re logged in with wallet {address.substring(0, 5)}...
            {address.substring(address.length - 5)}
          </p>
        )}

        <div
          className="mt-10 flex flex-1 flex-col items-center
        space-y-6 text-center lg:space-y-0 lg:justify-center"
        >
          <img
            className="
          w-80 object-cover pb-5 lg:h-50"
            src={urlFor(collections.mainImage).url()}
            alt=""
          />
          <h1
            className="text-3xl font-bold
          lg:text-5xl lg:font-extrabold"
          >
            Discover and collect extraordinary NFTs
          </h1>

          {loading ? (
          <p className="animate-bounce pt-2 text-xl text-green-500">Loading Supply Count...</p>
          ): (
          <p className="pt-2 text-xl text-green-500">{calmedSupply}/ {totalSupply?.toString()} NFTs claimed</p>
          )}
          {loading && (
            <img className="h-50 w-80 object-contain" src="https://miro.medium.com/max/1838/1*CsJ05WEGfunYMLGfsT2sXA.gif" alt=""/>
          )}
        </div>
        <button
        onClick={mintNFT} 
        disabled={loading || calmedSupply === totalSupply?.toNumber() || !address}
          className="mt-10 h-16 bg-red-600 text-white 
        rounded-full w-full font-bold disabled:bg-gray-400"
        >
          {loading? (
            <>Loading</>
          ): calmedSupply === totalSupply?.toNumber() ? (
            <>SOLD OUT</>
          ): !address ? (
            <>Sign in to Mint</>
          ): (
            <span className="font-bold">Mint NFT ({priceInEth} ETH)</span>
          )}
        </button>
      </div>
    </div>
  );
}

export default NFTDropPage;


export const getServerSideProps: GetServerSideProps = async ({params}) => {
  const query = `*[_type == "collection" && slug.current == $id][0] {
	_id,
	title,
	address,
	description,
  nftCollectionName,
	mainImage{
		asset
	},
	previewImage{
		asset
	},
	slug {
		current
	},
	creator-> {
		_id,
		name,
		address,
		slug {
			current
		},
	}
}`;
  const collections = await sanityClient.fetch(query, {
    id: params?.id
  });

  if (!collections) {
    return {
    notFound: true
  }
 }
  return {
    props: {
      collections,
    },
  }
}
